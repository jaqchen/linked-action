/* automatically generated by rust-bindgen 0.69.4 */

pub const RUST_EXTEND_H: u32 = 1;
pub const MVALUE_TYPE_NIL: u32 = 0;
pub const MVALUE_TYPE_BOOL: u32 = 1;
pub const MVALUE_TYPE_INT64: u32 = 2;
pub const MVALUE_TYPE_UINT64: u32 = 3;
pub const MVALUE_TYPE_F32: u32 = 4;
pub const MVALUE_TYPE_F64: u32 = 5;
pub const MVALUE_TYPE_STRING: u32 = 6;
pub const MVALUE_TYPE_MASK: u32 = 15;
pub const RUSTEX_STRLEN_MAX: u32 = 268435455;
pub const RUSTEX_STRLEN_MASK: u32 = 4294967280;
#[repr(C)]
pub union rext_val {
    pub mval_bool: ::std::os::raw::c_int,
    pub mval_int: ::std::os::raw::c_longlong,
    pub mval_uint: ::std::os::raw::c_ulonglong,
    pub mval_f32: f32,
    pub mval_f64: f64,
    pub mval_strp: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_rext_val() {
    const UNINIT: ::std::mem::MaybeUninit<rext_val> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rext_val>(),
        8usize,
        concat!("Size of: ", stringify!(rext_val))
    );
    assert_eq!(
        ::std::mem::align_of::<rext_val>(),
        8usize,
        concat!("Alignment of ", stringify!(rext_val))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mval_bool) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rext_val),
            "::",
            stringify!(mval_bool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mval_int) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rext_val),
            "::",
            stringify!(mval_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mval_uint) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rext_val),
            "::",
            stringify!(mval_uint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mval_f32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rext_val),
            "::",
            stringify!(mval_f32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mval_f64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rext_val),
            "::",
            stringify!(mval_f64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mval_strp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rext_val),
            "::",
            stringify!(mval_strp)
        )
    );
}
#[repr(C)]
pub struct rext_var {
    pub mvar_type: ::std::os::raw::c_uint,
    pub mvar_val: rext_val,
}
#[test]
fn bindgen_test_layout_rext_var() {
    const UNINIT: ::std::mem::MaybeUninit<rext_var> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rext_var>(),
        16usize,
        concat!("Size of: ", stringify!(rext_var))
    );
    assert_eq!(
        ::std::mem::align_of::<rext_var>(),
        8usize,
        concat!("Alignment of ", stringify!(rext_var))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mvar_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rext_var),
            "::",
            stringify!(mvar_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mvar_val) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rext_var),
            "::",
            stringify!(mvar_val)
        )
    );
}
pub type rext_any_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn rext_lua_new(lvar: *const rext_var, errp: *mut ::std::os::raw::c_int) -> rext_any_t;
}
extern "C" {
    pub fn rext_upval_set(
        anyt: rext_any_t,
        rfunc: *const rext_var,
        upindex: ::std::os::raw::c_int,
        rval: *const rext_var,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rext_upval_get(
        anyt: rext_any_t,
        rfunc: *const rext_var,
        upindex: ::std::os::raw::c_int,
        valname: *mut rext_var,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rext_gettop(anyt: rext_any_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rext_settop(anyt: rext_any_t, ntop: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rext_istable(anyt: rext_any_t, stkidx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rext_isfunc(anyt: rext_any_t, stkidx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rext_getglobal(anyt: rext_any_t, gvar: *const rext_var) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rext_pushval(anyt: rext_any_t, lvar: *const rext_var) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rext_getval(
        anyt: rext_any_t,
        stkidx: ::std::os::raw::c_int,
        resp: *mut rext_var,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rext_tpushval(
        anyt: rext_any_t,
        maxnum: ::std::os::raw::c_int,
        tabkey: *const rext_var,
        tabval: *const rext_var,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rext_tgetval(
        anyt: rext_any_t,
        tabidx: ::std::os::raw::c_int,
        tabkey: *const rext_var,
        tabval: *mut rext_var,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rext_call(
        anyt: rext_any_t,
        rfunc: *const rext_var,
        args: *const rext_var,
        resp: *mut rext_var,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rext_var_free(mvar: *mut rext_var);
}
extern "C" {
    pub fn rext_var_init(mvar: *mut rext_var);
}
extern "C" {
    pub fn rext_var_strbuf(
        mvar: *mut rext_var,
        pbuf: *const ::std::os::raw::c_char,
        plen: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rext_var_str(
        mvar: *const rext_var,
        plen: *mut ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rext_bor_str(
        mvar: *const rext_var,
        plen: *mut ::std::os::raw::c_uint,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rext_strtof(mvar: *const rext_var, errp: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn rext_strtol(
        mvar: *const rext_var,
        errp: *mut ::std::os::raw::c_int,
        base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn rext_strtoul(
        mvar: *const rext_var,
        errp: *mut ::std::os::raw::c_int,
        base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
